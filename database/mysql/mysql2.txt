8,字符集
（1）定义：计算机只能识别二进制代码，为了让计算机处理文字信息，人们将每个文字符号进行编码，这就是字符集
           简单来说，字符集就是一套文字符号及其编码，比较规则的集合
	而字符集的编码可以有多种不同的方式，参见 https://blog.csdn.net/u010737354/article/details/52456570
（2）字符集选择
    (1) 如果要处理各种各样的文字，或者发布到使用不同国家或地区，应该使用unicode字符集，而互联网上最流行的编码是 utf-8。
    (2) 数据库只支持汉字，并且信息量很大，性能要求高，应该使用gbk字符集。（这个做法不好，会有升级的隐患，比如以后想加英文和法文了）
    (3) 主要处理英文字符，少量汉字，应该使用utf-8字符集。
    (4) 备注：gbk字符集，一个汉字2个字节。gbk 的编码方式和字符集的值是一样的。
    (5) utf-8编码方式，一个汉字3个字节
（3）字符集校对规则
    (1) 校对规则：字符串的比较规则 _ci(大小写不敏感) _cs(大小写敏感) _bin(表示按编码值比较)
    (2) show character set;
        # 查看数据库支持的所有字符集
    (3) select * from information_schema.character_sets;
        # 查看所有的字符集和默认的校对规则
    (4) select * from information_schema.COLLATIONS;
        # 查看所有的校对规则
（4）字符集和校对规则查看
    (1) 服务器
        (1) 设置：在 my.cnf中 [mysql] character-set-server=gbk
        (2) 查看字符集：show variables like 'character_set_server'
        (3) 查看校对规则：show variables like 'collation_server';
        (4) 服务器的默认字符集：latin1   默认校对规则：latin1_swedish_ci
    (2) 数据库
        (1) 更改字符集： alter database wlp default character set utf8;
        (2) 查看字符集：show variables like 'character_set_database';
        (3) 查看校对规则：show variables like 'collation_database';
    (3) 数据表
        (1) 更改字符集：alter table wlp convert to character set gbk;
        (2) show create table user \G
            # 查看user表的字符集和校对规则
    (4) 字段
        (1) 更改字符集 alter table wlp modify column name varchar(100) character set utf8;
        (2) show create table user \G
            # 查看user表的字符集和校对规则
（5） 字符集更改(在原数据库有数据的基础上，更改字符集)(utf8改成gbk)
    (1) 导出表结构
       mysqldump -uroot -proot --default-character-set=gbk -d wlp > createtab.sql
       # --default-character-set=gbk   表示以gbk的字符集连接
       # -d 表示只导出表结构，不导出数据
    (2) 修改 createtab.sql 中定义的字符集为新的字符集(需要更改所有表的字符集,如果需要可以定义校对规则)
    (3) 导出所有的记录
       mysqldump -uroot -proot --quick --no-create-info --extended-insert --default-character-set=utf8 wlp > data.sql
       # --quick 用于快速的转储大的表
       # --no-create-info 不导出所有表的create table 语句
       # --extended-insert 使转储文件更小，重载文件时更迅速
       # --default-character-set=utf8 以原有的字符集导出数据，使得文件不会乱码
    (4) 打开 data.sql 将set names utf8 修改成 set names gbk
    (5) 使用新的字符集创建数据库
       create database wlp2 default charset gbk;
    (6) 创建表，执行 createtab.sql
       mysql -uroot -proot wlp2 < createtab.sql;
    (7) 导入数据，执行 data.sql
       mysql -uroot -proot wlp2 < data.sql;
    (8) 在 mysql 中，gbk 编码用的越来越少，最流行的为 unicode_utf8，如果要支持表情，例如用户名叫做 “神秘的🔫”。则应该使用 unicode_utf8mb4 编码.

9,索引
  https://www.cnblogs.com/whgk/p/6179612.html
（1）基础
    (1) 创建索引，会根据列中的数据，创建一个快速查找的索引列，用于快速找出在某个列中有一特定值的行
    (2) 索引的存储类型有两种：树(BTREE)和哈希值(HASH)
        (1) MyISAM和InnoDB存储引擎：只支持BTREE索引， 也就是说默认使用BTREE，不能够更换
        (2) MEMORY/HEAP存储引擎：支持HASH和BTREE索引
    (3) 优点：
        (1) 可以给任意字段设置索引       (2) 大大加快数据的查询速度
    (4) 缺点：
        (1) 创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加
        (2) 索引也需要占空间，我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上线值
        (3) 当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度
    (5) 使用原则：
        (1) 对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引
        (2) 数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果
        (3) 在数据量很大，但是值很小的列上不要设置索引，例如：性别(男，女)

（2）索引的分类：单列索引(普通索引(index)，唯一索引(unique index)，主键索引(primary key))、组合索引、全文索引(fulltext index)、空间索引
        (1) 单列索引：一个索引只包含单个列，一个表中可以有多个单列索引
             (1) 普通索引：没有什么限制，允许在定义索引的列中插入重复值和空值
                             创建索引：create table t1(id int not null, name varchar(30) not null, index(id));
                             备注：创建普通索引，对id字段使用了索引，没对索引进行命名，会使用默认的名字id
             (2) 唯一索引：索引列中的值必须是唯一的，但是允许为空值
                             创建索引：create table t2(id int null, name varchar(30) not null, unique index sy2(id));
                             备注：创建唯一索引。对id字段使用了索引，并且索引名字为sy1
             (3) 主键索引：是一种特殊的唯一索引，不允许有空值
                             创建索引：create table t3(id int not null, name varchar(30) not null, primary key sy3(id)); 
                             备注：主键索引就是主键，创建时需要用key，而不是index                                              
        (2) 组合索引：在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合
                       创建索引：create table t4(id int, name varchar(20), age int, info varchar(50), index sy4(id,name,age));
                       备注：将id，name，age三个字段设置了组合索引，在查询的时候，where后面必须有id= 这个条件，不然的话不会使用索引。
                             where后面跟，id和name，id和age，id，name和age都会使用索引。name和age不会使用
                       eg：explain select * from t4 where id=1 and age=12;
        (3) 全文索引：就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行
                       只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引
                       创建索引：create table t5(id int, name varchar(20),  fulltext index sy5(name)) engine=MyISAM;
                       eg：explain select * from t5 where match(name) against('gorlr');
                       # match.....against 用于模糊查询，match后面跟索引的字段，如果索引的字段有两个，这里必须填写两个，against后面跟要查询的字段
        (4) 空间索引：空间索引是对空间数据类型的字段建立的索引，要求，引擎为MyISAM，创建空间索引的列，必须将其声明为NOT NULL

（3）索引的操作(在已经创建好的表上)
      （1）show index from t1;
              # 查t1表中所有的索引
      （2）alter table t1 add index sy1(name);
              create index sy1 on t1(name(20));
              # 给t1表上的name字段创建索引的两种方法
              # name后面的20是设置的前缀长度，这时候检检索时会对前20个自读进行检索
              alter table cs add primary key sy3(h0);
              # 创建主键索引(经测试用 create 语句没法创建，只能用这一种方法创建主键索引)
              alter table cs change column h0 h0 int not null primary key auto_increment;
              # 创建主键并定义主键自增长
      （3）alter table t1 drop index sy1;
              drop index sy1 on t1;
              # 删除索引的两种方法
              alter table cs drop primary key;
              # 删除主键 当主键设置了自增长，这时候需要更改主键字段类型，取消自增长，然后再进行删除
              # alter table cs modify h0 int;
              # alter table cs drop primary key;

（4）索引设计的原则
      （1）最适合索引的列是出现在where后面的列
      （2）如果对字符串进行索引，应该指定一个前缀长度
      （3）每个额外的索引都要占用额外的磁盘空间，并降低读写性能，因此索引不能设计的太多。


10，视图
（1）基础：
         (1)  什么是视图：视图是一种虚拟存在的表，试图并不在数据库中实际存在，行和列的数据来自于自定义视图中使用的表，并且是在使用视图时动态生成的
         (2)  视图的优势：
               (1)  简单：使用视图的用户，不用担心视图涉及的表的结构，关联情况等信息，是过滤好的结果集
               (2)  安全：只能访问特定的而结果集
               (3)  数据独立：表增加列，增加关联对视图影响不大
（2）试图创建
        (1)  create or replace view fish_view as
              select distinct  a.id, a.age, b.price, b.name
              from users a join product b
              where a.id = b.id;
       (2) 备注：from后面不能跟子查询，如果需要，可已将子查询定义成一个视图，然后去调用该视图
       (3) 定义好视图之后，视图的数据会根据所关联的表数据自动更新，也可以手动跟新视图里面的数据，这时候原表的数据也会改变
            如果创建视图时有以下情况，就不可以进行手动更新
            (1)  包含以下sql语句：聚合函数(sum,min,max,count)，distinct，group by，having，union，union all
            (2)  常量视图
            (3)  select 中包含子查询
            (4)  jion
            (5)  from 后面跟一个不能跟新的视图
            (6)  where 后面的子查询引用了from里面的表
      (4) 对视图更新的限制
            (1)  with local check option  只要满足本视图就可以更新
            (2)  with cascaded check option  满足包含的所有视图才可以更新、
            (3)  eg:
                     (1)  create or replace view fish_view as
                           select id, num from payment
                           where num < 10 with check option

                     (2)  create or replace view fish1_view as
                           select id, num from fish_view 
                           where num > 5 with local check option
        
                     (3)  create or replace view fish2_view as
                           select id, num from fish_view 
                           where num > 5 with local check option
      
                     (4)  update fish1_view set num=11   # 可以正常执行
                           update fish2_view set num=11   # 没法执行

（3）试图删除
       (1)  drop view fish_view

（4）试图查看
       (1)  show tables;       show create view fish_view;
